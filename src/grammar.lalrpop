use crate::tokens::{Token, LexicalError};
use crate::ast;

grammar;

extern {
  type Location = usize;
  type Error = lexer::LexicalError;

  enum Token {
    "program" => Token::KeywordProgram,
    "main" => Token::KeywordMain,
    "print" => Token::KeywordPrint,
    "if" => Token::KeywordIf,
    "else" => Token::KeywordElse,
    "while" => Token::KeywordWhile,
    "do" => Token::KeywordDo,
    "end" => Token::KeywordEnd,
    "int" => Token::KeywordInt,
    "cte_int" => Token::CteInt,
    "float" => Token::KeywordFloat,
    "cte_float" => Token::CteFloat,
    "cte.string" => Token::CteString,
    "var" => Token::KeywordVar,
    "void" => Token::KeywordVoid,
    "id" => Token::Identifier(<String>),
    "integer" => Token::Integer(<i64>),
    "float" => Token::Float(<i64>),
    "(" => Token::LParen,
    ")" => Token::RParen,
    "[" => Token::LBraket,
    "]" => Token::RBraket,
    "{" => Token::LBrace,
    "}" => Token::RBrace,
    "=" => Token::AssignSimbol,
    ":" => Token::TwoPoints,
    "!=" => Token::NotEqual,
    ">" => Token::BigerThan,
    "<" => Token::SmallerThan,
    ";" => Token::Semicolon,
    "," => Token::Comma,
    "+" => Token::OperatorAdd,
    "-" => Token::OperatorSub,
    "*" => Token::OperatorMul,
    "/" => Token::OperatorDiv,
  }
}

#[inline]
Id: String = {
    <s:"id"> => s
};

#[inline]
Integer: i64 = {
    <n:"integer"> => n
};

#[inline]
Type: String = {
    "int" => "int".to_string(),
    "float" => "float".to_string(),
};

#[inline]
Cte: i64 = {
    <n:Integer> => n
};

#[inline]
IdCte: Expression = {
    <id:Id> => Expression::Variable(id),
    <n:Cte> => Expression::Integer(n)
};

#[inline]
AddSubOp: (BinaryOperator, Expression) = {
    "+" <t:Term> => (BinaryOperator::Add, t),
    "-" <t:Term> => (BinaryOperator::Sub, t)
};

#[inline]
TermLoop: (Operator, Expression) = {
    "*" <f:Factor> => (Operator::Mul, f),
    "/" <f:Factor> => (Operator::Div, f)
};

#[inline]
CompOp: (BinaryOperator, Expression) = {
    ">" <right:Exp> => (BinaryOperator::GreaterThan, right),
    "<" <right:Exp> => (BinaryOperator::LessThan, right),
    "!=" <right:Exp> => (BinaryOperator::NotEqual, right)
};

// ---------------------------------------------------- Program -------------------------------------------------------
pub Program: Program = {
  "program" <fid:Id> ";" <vars:Vars?> <funcs:Function*> "main" <mainb:Body> "end" => Program {
      id: fid,
      vars: vars.unwrap_or(vec![]),
      funcs: funcs,
      body: mainb,
  }
};
// ---------------------------------------------------------------------------------------------------------------------

// ---------------------------------------------------- Vars -------------------------------------------------------
#[inline]
Vars: Vec<VarDecl> = {
  <decls:VarDecl*> => decls
};


VarDecl: VarDecl = {
    "var" <fisrt:Id> <tail:IdTail*> ":" <ty:Type> ";"=> VarDecl {
        let mut names = vec![first];
        names.extend(tail);
        VarDecl {
            name,
            var_type: ty,
        }
    }
};

IdTail: Vec<String> = {
    "," <name:Id> => name
}
// ----------------------------------------------------------------------------------------------------------------------

// ---------------------------------------------------- Functions -------------------------------------------------------
Function: Func = {
    "void" <id:Id> "(" <params:ParamList> ")" "[" <vars:VarDecl?> <body:Body> "]" ";" => Func {
        name: id,
        params,
        vars,
        body,
    }
};

//regla para la lista de parámetros
ParamList: Vec<Param> = {
    => vec![], //lista vacia de paramteros
    <first:Param> <tail:ParamTail*> => { //first es el primer parametro seguido de , Param por si hay mas de uno
        let mut list = vec![first]; //lista mutable
        list.extend(tail.into_iter().map(|(_, p)| p)); //junatmos primer y segundo valor
        list
    }
};

ParamTail: Vec<Param> = {
    => vec![], //lista vacia de paramteros
    "," <param: Param> => param 
}

//definicion de Param
Param: Param = {
    <name:Id> ":" <ty:Type> => Param {
        name,
        param_type: ty,
    }
};

//------------------------------------------------------------------------------------------------------------------------------------

//---------------------------------------------- Body -----------------------------------------------

// Cuerpo ficticio (puedes hacer algo más complejo)
pub Body: Vec<Statement> = {
    "{" <stmts:Statement*> "}" => stmts
};
//-------------------------------------------------------------------------------------------------------------------------------


// ----------------------------------------------------- Statement ------------------------------------------------------
// ----------------------------------------------------- |_ Assign ------------------------------------------------------
// ----------------------------------------------------- |_ Condition ---------------------------------------------------
// ----------------------------------------------------- |_ Cycle -------------------------------------------------------
// ----------------------------------------------------- |_ F_Call ------------------------------------------------------
// ----------------------------------------------------- |_ Print -------------------------------------------------------

pub Statement: Statement = {
    <s:Assign> => s,
    <s:Condition> => s,
    <s:Cycle> => s,
    <s:F_Call> => s,
    <s:Print> => s
};

// ---------------------------- Assign
pub Assign: Statement = {
    <id:Id> "=" <e:Expression> ";" => Statement::Variable {
      id: id,
      value: Box::new(e),
    }
};

// ---------------------------- Condition
pub Condition: Statement = {
    "if" "(" <e:Expression> ")" <then_body:Body> <else_body:ElsePart> ";" => Statement::Condition {
        condition: Box::new(e),
        then_branch: then_body,
        else_branch: else_body,
    }
};

pub ElsePart: Vec<Statement> = {
    "else" <b:Body> => b,
    () => vec![] 
};


// ---------------------------- Cycle
pub Cycle: Statement = {
  "while" "(" <e:Expression> ")" "do" <b:Body> ";" => Statement::Cycle {
      condition: Box::new(e),
      body: b,
  }
};

// ---------------------------- F_Call
pub F_Call: Statement = {
    <firstid:Id> "(" <firstarg:Expression> <args:ExpFCallLoop*> ")" ";" => Statement::FCall {
        id: firstid,
        args: args,
    }
};

pub ExpFCallLoop: Vec<Expression> = {
    "," <expr:Expression> => expr
};

// ---------------------------- Print
Print: Statement = {
    "print" <val:Expression> ";" => Statement::Print {
        value: Box::new(val),
    },
};

pub ExpStrLoop: Vec<Expression> = {
    <first:Expression> <rest:CteStringList?> => {
        let mut args = vec![first];
        args.extend(rest.into_iter().flatten());
        args
    }
};

pub CteStringList: Vec<Expression> = {
    "," <s:"cte.string"> => vec![Expression::String(s)],
    "," <s:"cte.string"> <rest:CteStringList> => {
        let mut args = vec![Expression::String(s)];
        args.extend(rest);
        args
    }
};

// -------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------

// ---------------------------------------------- Expression ---------------------------------------------------
pub Expression: Expression = {
    <first:Exp> <op:CompOp> <last:Exp> => Expression::Binary {
        left: Box::new(first),
        operator: op,
        right: Box::new(last),
    },
};

//-------------------------------------------------- Exp --------------------------------------------------------
pub Exp: Expression = {
    <first:Term> <rest:AddSubOp*> => {
        rest.into_iter().fold(first, |acc, (op, rhs)| {
            Expression::Binary {
                left: Box::new(acc),
                operator: op,
                right: Box::new(rhs),
            }
        })
    }
};

//---------------------------------------------------- Term -------------------------------------------------------
pub Term: Expression = {
    <factor:Factor> <rest:TermLoop*> => {
        rest.into_iter().fold(factor, |acc, (op, next)| {
            Expression::Binary {
                left: Box::new(acc),
                operator: op,
                right: Box::new(next),
            }
        })
    }
};

//--------------------------------------------------- Factor ------------------------------------------------------
Factor: Expression = {
    //(EXPRESION)
    "(" <e:Expression> ")" => e,

    //-cte o -id  → se convierte en 0 - expr
    "-" <e:IdCte> => Expression::Binary {
        left: Box::new(Expression::Integer(0)),
        operator: BinaryOperator::Sub,
        right: Box::new(e),
    },

    // Caso: +cte o +id  → se convierte en 0 + expr
    "+" <e:IdCte> => Expression::Binary {
        left: Box::new(Expression::Integer(0)),
        operator: BinaryOperator::Add,
        right: Box::new(e),
    },

    // Caso: id o cte directamente
    <e:IdCte> => e,
};
